(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>l});var o=n(354),r=n.n(o),a=n(314),i=n.n(a)()(r());i.push([e.id,"body{\n}\n\nh3{\n    padding: 0;\n    margin: 0;\n}\n\n\n.container{\n    display: grid;\n    grid-template-columns: 200px auto;\n    grid-template-rows: 50px auto;\n    min-height: 100vh;\n}\n\n.top-bar{\n    border: solid red;\n    grid-column-start: 2;\n    min-height: 50px;\n    max-height: 50px;\n    font-size: 1.2rem;\n    text-align: center;\n    font-weight: 700;\n\n}\n\n.navigation{\n    /* grid-column-start: 1; */\n    grid-row: 1 / 3;\n    display: flex;\n    border: solid purple;\n    flex-direction: column;\n    min-width: 200px;\n    gap: 20px;\n    position: fixed;\n}\n\n.content{\n    grid-column-start: 2;\n    flex-grow: 1;\n}\n\nul{\n    padding: 0;\n    margin: 0;\n}\n.list-item{\n    list-style-type: none;\n}\n\n.content{\n    border: solid orange;\n}\n\n.task {\n    padding-left: 20px;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    border-bottom: dashed black;\n}\n.task p{\n    margin: 0;\n    padding: 0;\n}\n\n.task-completed{\n    background-color: lightgray;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;AACA;;AAEA;IACI,UAAU;IACV,SAAS;AACb;;;AAGA;IACI,aAAa;IACb,iCAAiC;IACjC,6BAA6B;IAC7B,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;;AAEpB;;AAEA;IACI,0BAA0B;IAC1B,eAAe;IACf,aAAa;IACb,oBAAoB;IACpB,sBAAsB;IACtB,gBAAgB;IAChB,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,oBAAoB;IACpB,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,SAAS;AACb;AACA;IACI,qBAAqB;AACzB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,oBAAoB;IACpB,2BAA2B;AAC/B;AACA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,2BAA2B;AAC/B",sourcesContent:["body{\n}\n\nh3{\n    padding: 0;\n    margin: 0;\n}\n\n\n.container{\n    display: grid;\n    grid-template-columns: 200px auto;\n    grid-template-rows: 50px auto;\n    min-height: 100vh;\n}\n\n.top-bar{\n    border: solid red;\n    grid-column-start: 2;\n    min-height: 50px;\n    max-height: 50px;\n    font-size: 1.2rem;\n    text-align: center;\n    font-weight: 700;\n\n}\n\n.navigation{\n    /* grid-column-start: 1; */\n    grid-row: 1 / 3;\n    display: flex;\n    border: solid purple;\n    flex-direction: column;\n    min-width: 200px;\n    gap: 20px;\n    position: fixed;\n}\n\n.content{\n    grid-column-start: 2;\n    flex-grow: 1;\n}\n\nul{\n    padding: 0;\n    margin: 0;\n}\n.list-item{\n    list-style-type: none;\n}\n\n.content{\n    border: solid orange;\n}\n\n.task {\n    padding-left: 20px;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    border-bottom: dashed black;\n}\n.task p{\n    margin: 0;\n    padding: 0;\n}\n\n.task-completed{\n    background-color: lightgray;\n}"],sourceRoot:""}]);const l=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],l=0;l<e.length;l++){var c=e[l],s=o.base?c[0]+o.base:c[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var p=n(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=r(m,o);o.byIndex=l,t.splice(l,0,{identifier:u,updater:A,references:1})}i.push(u)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var c=o(e,r),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=["All","Test"];let t="All";function o(){return e}function r(){let t="";return e.forEach((e=>{const n=document.createElement("option");n.value=e,n.innerText=e,t+=n.outerHTML})),t}function a(){return t}function i(e){t=e}const l=[];let c=1;function s(e){e.sort(((e,t)=>e.dueDate>t.dueDate?1:t.dueDate>e.dueDate?-1:0)),console.log(e)}function d(e){const t=document.querySelector(".form"),n='\n    <dialog class="dialog">\n    <form>\n        <div class="form-row">\n            <label for="title"><span aria-label="required">*</span>Task Title</label><br>\n            <input type="text" name="title" id="title" required>\n        </div>\n\n        <div class="form-row">\n            <label for="description"><span aria-label="required">*</span>Task Description</label><br>\n            <textarea name="description" id="description" rows="4" cols="30" required></textarea>\n        </div>\n\n        <div class="form-row">\n            <label for="due-date"><span aria-label="required">*</span>Task Due Date</label><br>\n            <input type="date" name="due-date" id="due-date" required>\n        </div>\n\n        <div class="form-row">\n            <label for="priority">Task Priority</label><br>\n\n            <label for="none">None:</label>\n            <input type="radio" name="priority" id="None" value="None">\n\n            <label for="low">Low:</label>\n            <input type="radio" name="priority" id="Low" value="Low">\n\n            <label for="medium">Medium:</label>\n            <input type="radio" name="priority" id="Medium" value="Medium">\n\n            <label for="high">High:</label>\n            <input type="radio" name="priority" id="High" value="High">\n        </div>\n\n        <div class="form-row">\n            <label for="project">Project Label</label><br>\n            <select name="project" id="project">\n                '+r()+'\n            </select>\n        </div>\n        <button class="btnSubmit" type="submit">Submit</button>\n    </form>\n    <button class="close">Close</button>\n    </dialog>';t.innerHTML=n,e&&(console.log("test"),console.log(e.priority),console.log(e),document.querySelector("#title").value=e.title,document.querySelector("#description").value=e.description,document.querySelector("#due-date").value=e.dueDate,document.querySelector(`#${e.priority}`).checked=!0,document.querySelector(`option[value=${e.projects}]`).selected=!0);const o=document.querySelector(".dialog"),a=document.querySelector(".close"),i=document.querySelector(".btnSubmit");o.showModal(),a.addEventListener("click",(()=>{o.close(),t.innerHTML=""})),i.addEventListener("click",(n=>{n.preventDefault();const r=document.querySelector("#title").value,a=document.querySelector("#description").value,i=document.querySelector("#due-date").value,l=document.querySelector('input[name="priority"]:checked').value,c=document.querySelector("#project").value;r&&a&&i&&l&&(e?e.setTask(r,a,i,l,c):function(e,t,n,o,r){new u(e,t,n,o,"All").addItem()}(r,a,i,l),o.close(),t.innerHTML="")}))}class u{constructor(e,t,n,o,r){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.projects=r,this.idx=l.length,this.completed=!1}addItem(){l.push(this),p(c),B()}setTask(e,t,n,o,r){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.projects=r,p(c),B()}editTask(){d(this),p(c),B()}deleteTask(){l.splice(this.idx,1),l.forEach(((e,t)=>{e.idx=t})),p(c),B()}setComplete(){this.completed=!this.completed,B()}listItems(){console.log(l)}}function p(e){s(l);const t=new Date,n=new Date(t.getTime()-6e4*t.getTimezoneOffset()).toISOString().split("T")[0],o=new Date;o.setDate(o.getDate()+e);const r=new Date(o.getTime()-6e4*o.getTimezoneOffset()).toISOString().split("T")[0],i=document.querySelector(".content");i.innerHTML="",l.forEach((t=>{if((1==e||t.dueDate>=n&&t.dueDate<=r)&&("All"==a()||t.projects==a())){console.log(a());const e=document.createElement("div");e.className="task";const n=document.createElement("h3");n.innerText=t.title;const o=document.createElement("p");o.innerText=t.description;const r=document.createElement("p");r.innerText=`Due Date: ${t.dueDate}`;const l=document.createElement("p");l.innerText=`Priority: ${t.priority}`;const c=document.createElement("p");c.innerText=`Project Label: ${t.projects}`;const s=document.createElement("button");s.className="delete-task",s.innerText="Delete Task";const d=document.createElement("button");d.className="edit-task",d.innerText="Edit Task",s.addEventListener("click",(()=>{t.deleteTask()})),d.addEventListener("click",(()=>{t.editTask()}));const u=document.createElement("button");u.className="completed-task",u.innerText="Set Complete",u.addEventListener("click",(e=>{t.setComplete(),console.log(e.target.parentNode),t.completed?e.target.parentNode.classList.add("task-completed"):e.target.parentNode.classList.remove("task-completed")})),e.append(n),e.append(o),e.append(r),e.append(l),e.append(c),e.append(s),e.append(d),e.append(u),i.append(e)}}))}let m=new u("test1","desc of test 1","2024-05-20","High","All");l.push(m);let A=new u("test2","desc of test 2","2024-07-26","Medium","All");l.push(A);let f=new u("test3","desc of test 3","2024-03-27","Low","All");l.push(f);let g=new u("test4","desc of test 4","2024-03-10","High","All");l.push(g);let h=new u("test5","desc of test 5","2023-05-16","None","All");l.push(h);let b=new u("test6","desc of test 6","2024-10-16","None","All");l.push(b);let v=new u("test7","desc of test 7","2024-12-16","None","All");l.push(v);let y=new u("test8","desc of test 8","2024-01-16","None","All");l.push(y);let x=new u("test9","desc of test 9","2024-02-16","None","All");l.push(x);let T=new u("test10","desc of test 10","2024-01-16","None","All");function B(){const e=JSON.stringify(o()),t=JSON.stringify(l);localStorage.setItem("tasks",t),localStorage.setItem("projects",e)}function C(e){switch(e){case"Today":I(0);break;case"Next 7 Days":I(7);break;case"All My Tasks":I(1)}}function I(e){!function(e){c=e,p(c)}(e)}l.push(T),s(l),p(c);var k,S=n(72),E=n.n(S),w=n(825),j=n.n(w),N=n(659),D=n.n(N),L=n(56),q=n.n(L),M=n(540),P=n.n(M),H=n(113),O=n.n(H),$=n(208),U={};U.styleTagTransform=O(),U.setAttributes=q(),U.insert=D().bind(null,"head"),U.domAPI=j(),U.insertStyleElement=P(),E()($.A,U),$.A&&$.A.locals&&$.A.locals,null==localStorage.getItem("tasks")?console.log("tasks null!"):(console.log(JSON.parse(localStorage.getItem("tasks"))),k=JSON.parse(localStorage.getItem("tasks")),l.length=0,k.forEach((e=>{console.log(e),l.push(e)})),p(c)),null==localStorage.getItem("projects")?console.log("projects null"):function(t){e.length=0,t.forEach((t=>{e.push(t)}))}(JSON.parse(localStorage.getItem("projects"))),function(){a();const t=document.querySelector(".top-bar");t.innerText=`View: All My Tasks, Projects: ${a()}`;const n=document.querySelector(".navigation"),s=document.createElement("ul");let d="All My Tasks";const u=document.createElement("li");u.className="add-task-item";const m=document.createElement("button");m.className="todo-button",m.innerText="Add Task",u.append(m),s.append(u),["Today","Next 7 Days","All My Tasks"].forEach((e=>{const n=document.createElement("li"),o=document.createElement("button");o.className="list-item",o.innerText=e,o.addEventListener("click",(e=>{d=e.target.innerText,t.innerText=`View: ${d}, Projects: ${a()}`,C(d)})),n.append(o),s.append(n)}));const A=document.createElement("ul"),f=document.createElement("button");f.className="add-project-btn",f.innerText="Add Project",A.append(f);const g=document.createElement("button");g.className="del-project-btn",g.innerText="Delete Project",g.addEventListener("click",(()=>{!function(){const t=document.querySelector(".form"),n='\n    <dialog class="dialog-delete">\n    <form>\n    <div class="form-row">\n        <label for="project-delete">Delete Project Label</label><br>\n        <select name="project-delete" id="project-delete">\n        '+r()+'\n        </select>\n    </div>\n    <button class="btnSubmitDelete" type="submit">Delete</button>\n    </form>\n    <button class="closeDeleteForm">Close</button>\n    </dialog>';t.innerHTML=n;const o=document.querySelector(".dialog-delete"),a=document.querySelector(".closeDeleteForm"),i=document.querySelector(".btnSubmitDelete");o.showModal(),a.addEventListener("click",(()=>{o.close(),t.innerHTML=""})),i.addEventListener("click",(n=>{n.preventDefault();const r=document.querySelector("#project-delete").value;var a;"All"!=r&&(a=r,console.log(a),e.splice(e.indexOf(a),1),B(),function(e){l.forEach((t=>{t.projects==e&&(t.projects="All")})),p(c),B()}(a)),o.close(),t.innerHTML=""}))}()})),A.append(g);const h=document.createElement("h3");h.innerText="My Projects",A.append(h),o().forEach((e=>{const n=document.createElement("li"),o=document.createElement("button");o.className="list-item",o.innerText=e,o.addEventListener("click",(e=>{t.innerText=`View: ${d}, Projects: ${e.target.innerText}`,i(e.target.innerText),C(d)})),n.append(o),A.append(n)})),f.addEventListener("click",(()=>{let n=prompt("Please enter project name","All");if(function(t){return e.includes(t)?0:(e.push(t),B(),1)}(n)){const e=document.createElement("li"),o=document.createElement("button");o.className="list-item",o.innerText=n,o.addEventListener("click",(e=>{t.innerText=`View: ${d}, Projects: ${e.target.innerText}`,i(e.target.innerText),C(d)})),e.append(o),A.append(e)}})),n.append(s),n.append(A)}(),document.querySelector(".todo-button").addEventListener("click",(()=>{d(0)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,